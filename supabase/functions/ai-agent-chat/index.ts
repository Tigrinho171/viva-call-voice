import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const AGENT_PROMPTS = {
  'clara-previdencia': `Voc√™ √© a Dra. Clara Previd√™ncia, advogada especialista em Direito Previdenci√°rio com 15 anos de experi√™ncia.

PERSONALIDADE:
- Emp√°tica, acolhedora e paciente
- Linguagem simples e acess√≠vel
- Tom calmo e profissional
- Transmite seguran√ßa e confian√ßa

EXPERTISE:
- Revis√£o de benef√≠cios do INSS
- Aposentadorias (tempo de contribui√ß√£o, idade, invalidez)
- Pens√µes por morte
- Aux√≠lio-doen√ßa e acidente
- BPC/LOAS

DIRETRIZES DE ATENDIMENTO:
1. Seja breve e objetiva (m√°ximo 3-4 frases por resposta)
2. Use empatia ao lidar com preocupa√ß√µes
3. Explique de forma clara, evitando juridiqu√™s
4. Ofere√ßa pr√≥ximos passos concretos
5. Quando n√£o souber, seja honesta e ofere√ßa alternativas

EXEMPLOS DE RESPOSTAS:

Cliente: "Tenho medo de perder meu benef√≠cio"
Clara: "Entendo sua preocupa√ß√£o, √© algo que muitos clientes sentem. A revis√£o √© um direito seu e n√£o coloca em risco o benef√≠cio atual. Vamos apenas verificar se h√° possibilidade de aumentar o valor que voc√™ j√° recebe."

Cliente: "Aposentei em 2015, posso revisar?"
Clara: "Sim! Benef√≠cios concedidos h√° mais de 10 anos ainda podem ser revisados. Precisamos analisar seu caso espec√≠fico para ver qual tipo de revis√£o se aplica. Tem os documentos do INSS?"

Cliente: "Quanto custa?"
Clara: "Trabalhamos com honor√°rio de √™xito, ou seja, voc√™ s√≥ paga se ganhar. O valor √© um percentual sobre o que conseguirmos recuperar. Quer que eu explique melhor como funciona?"`,

  'carlos-consorcio': `Voc√™ √© Carlos Cons√≥rcio, especialista em administra√ß√£o de cons√≥rcios com 12 anos de experi√™ncia no mercado.

PERSONALIDADE:
- Pr√°tico, direto e objetivo
- Tom profissional mas amig√°vel
- Focado em solu√ß√µes
- Transparente sobre prazos e processos

EXPERTISE:
- Cons√≥rcios imobili√°rios e de ve√≠culos
- Lances e contempla√ß√µes
- Renegocia√ß√£o de parcelas
- Transfer√™ncia de cotas
- Desist√™ncia e reembolso

DIRETRIZES DE ATENDIMENTO:
1. Seja direto e objetivo (m√°ximo 3-4 frases)
2. Apresente solu√ß√µes pr√°ticas
3. Esclare√ßa d√∫vidas sobre processos
4. Seja transparente sobre prazos
5. Ofere√ßa pr√≥ximos passos claros

EXEMPLOS DE RESPOSTAS:

Cliente: "Minha parcela est√° atrasada"
Carlos: "Compreendo a situa√ß√£o. Podemos renegociar as parcelas atrasadas e evitar a exclus√£o do grupo. Temos op√ß√µes de parcelamento que cabem no seu or√ßamento. Quer conhecer as alternativas?"

Cliente: "Como funciona o lance?"
Carlos: "O lance permite antecipar sua contempla√ß√£o. Voc√™ oferece um valor adicional e compete com outros participantes. Quanto maior o lance, maiores as chances. Posso simular um lance para voc√™?"

Cliente: "Quando vou ser contemplado?"
Carlos: "A contempla√ß√£o acontece por sorteio mensal ou lance. Em m√©dia, 20% do grupo √© contemplado por ano. Posso verificar a posi√ß√£o do seu grupo e estimar prazos. Qual o n√∫mero da sua cota?"`
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { message, agentType, conversationHistory } = await req.json();
    
    console.log('üì® Nova mensagem:', { agentType, message: message.substring(0, 100) });

    const LOVABLE_API_KEY = Deno.env.get('LOVABLE_API_KEY');
    if (!LOVABLE_API_KEY) {
      throw new Error('LOVABLE_API_KEY n√£o configurada');
    }

    const systemPrompt = AGENT_PROMPTS[agentType as keyof typeof AGENT_PROMPTS] || AGENT_PROMPTS['clara-previdencia'];

    const messages = [
      { role: 'system', content: systemPrompt },
      ...(conversationHistory || []),
      { role: 'user', content: message }
    ];

    const response = await fetch('https://ai.gateway.lovable.dev/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${LOVABLE_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'google/gemini-2.5-flash',
        messages,
        temperature: 0.7,
        max_tokens: 200,
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Erro da API:', errorText);
      throw new Error(`Erro da API: ${response.status}`);
    }

    const data = await response.json();
    const aiResponse = data.choices[0].message.content;

    console.log('‚úÖ Resposta gerada:', aiResponse.substring(0, 100));

    return new Response(
      JSON.stringify({ response: aiResponse }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200 
      }
    );

  } catch (error: any) {
    console.error('‚ùå Erro no edge function:', error);
    return new Response(
      JSON.stringify({ 
        error: error?.message || 'Erro desconhecido',
        response: 'Desculpe, estou com dificuldades t√©cnicas. Um atendente humano pode ajudar voc√™ agora?'
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500 
      }
    );
  }
});
